name: Auto Merge PR if All Checks Pass

# Agregar permisos necesarios para evitar el error "Resource not accessible by integration"
permissions:
  pull-requests: write
  issues: write
  contents: read

on:
  # Activar cuando los checks se completen
  check_suite:
    types: [completed]
  status:
  pull_request:
    types: [opened, synchronize, ready_for_review]

jobs:
  automerge:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let pr;
            
            // Obtener PR desde diferentes tipos de eventos
            if (context.eventName === 'pull_request') {
              pr = context.payload.pull_request;
            } else if (context.eventName === 'check_suite') {
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.payload.check_suite.head_branch}`,
                state: 'open'
              });
              pr = prs.data[0];
            } else if (context.eventName === 'status') {
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open'
              });
              pr = prs.data.find(p => p.head.sha === context.payload.sha);
            }
            
            if (!pr) {
              console.log("No open PR found for this commit");
              core.setOutput('merge', 'false');
              return;
            }
            
            console.log(`Checking PR #${pr.number}: ${pr.title}`);
            
            // Verificar que no sea un draft
            if (pr.draft) {
              console.log("PR is draft, skipping auto-merge");
              core.setOutput('merge', 'false');
              return;
            }
            
            core.setOutput('merge', 'true');
            core.setOutput('pr_number', pr.number);
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('base_ref', pr.base.ref);

      - name: Wait 4 minutes for all checks to complete
        if: steps.pr-info.outputs.merge == 'true'
        run: |
          echo "‚è±Ô∏è Waiting 4 minutes for all checks (including SonarCloud) to complete..."
          echo "Started at: $(date)"
          sleep 240  # 4 minutos = 240 segundos
          echo "Wait completed at: $(date)"

      - name: Check all required status checks and auto-merge
        if: steps.pr-info.outputs.merge == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = ${{ steps.pr-info.outputs.pr_number }};
            const headSha = '${{ steps.pr-info.outputs.head_sha }}';
            const baseRef = '${{ steps.pr-info.outputs.base_ref }}';
            
            // Solo hacer auto-merge a main
            if (baseRef !== 'main') {
              console.log(`PR targets ${baseRef}, only auto-merging to main`);
              return;
            }
            
            console.log(`Checking status for PR #${prNumber} (${headSha}) after 4-minute wait`);
            
            // Verificar que el PR siga abierto despu√©s de la espera
            const prResponse = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: prNumber
            });
            
            if (prResponse.data.state !== 'open') {
              console.log(`PR #${prNumber} is no longer open (state: ${prResponse.data.state})`);
              return;
            }
            
            if (prResponse.data.merged) {
              console.log(`PR #${prNumber} has already been merged manually`);
              return;
            }
            
            // Obtener el estado combinado de todos los checks
            const statusResponse = await github.rest.repos.getCombinedStatusForRef({
              owner,
              repo,
              ref: headSha
            });
            
            // Obtener checks individuales
            const checksResponse = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: headSha
            });
            
            console.log(`Combined status: ${statusResponse.data.state}`);
            console.log(`Total checks: ${checksResponse.data.total_count}`);
            
            let sonarCheckPassed = false;
            let hasRequiredChecks = false;
            
            // Buscar en status checks
            for (const status of statusResponse.data.statuses) {
              console.log(`Status check: ${status.context} - ${status.state}`);
              if (status.context.toLowerCase().includes('sonar')) {
                hasRequiredChecks = true;
                sonarCheckPassed = status.state === 'success';
              }
            }
            
            // Buscar en check runs
            for (const check of checksResponse.data.check_runs) {
              console.log(`Check run: ${check.name} - ${check.conclusion}`);
              if (check.name.toLowerCase().includes('sonar')) {
                hasRequiredChecks = true;
                sonarCheckPassed = check.conclusion === 'success';
              }
            }
            
            // Verificar estado general
            const allStatusChecksPass = statusResponse.data.state === 'success';
            const allCheckRunsPass = checksResponse.data.check_runs.length === 0 || 
              checksResponse.data.check_runs.every(check => 
                check.conclusion === 'success' || check.conclusion === 'neutral'
              );
            
            console.log(`All status checks pass: ${allStatusChecksPass}`);
            console.log(`All check runs pass: ${allCheckRunsPass}`);
            console.log(`Sonar check passed: ${sonarCheckPassed}`);
            console.log(`Has required checks: ${hasRequiredChecks}`);
            
            // Condiciones para auto-merge
            const shouldMerge = allStatusChecksPass && allCheckRunsPass && 
                               (sonarCheckPassed || !hasRequiredChecks);
            
            if (shouldMerge) {
              console.log("‚úÖ All checks passed after 4-minute wait! Attempting auto-merge...");
              
              try {
                const mergeResult = await github.rest.pulls.merge({
                  owner,
                  repo,
                  pull_number: prNumber,
                  merge_method: "merge",
                  commit_title: `Auto-merge PR #${prNumber}`,
                  commit_message: "Automatically merged after 4-minute wait and all required checks passed ‚úÖ"
                });
                
                console.log(`‚úÖ PR #${prNumber} merged successfully after 4-minute wait!`);
                
                // Agregar comentario de confirmaci√≥n
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: "üéâ This PR was automatically merged after waiting 4 minutes for all checks to complete!\n\n‚è±Ô∏è **Auto-merge process:**\n- Waited 4 minutes for all checks to complete\n- Verified all required checks passed\n- Merged automatically ‚úÖ"
                });
                
              } catch (error) {
                console.log(`‚ùå Failed to merge PR after 4-minute wait: ${error.message}`);
                
                // Agregar comentario sobre el fallo
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: prNumber,
                  body: `‚ö†Ô∏è Auto-merge failed after 4-minute wait: ${error.message}\n\n**Status after wait:**\n- Status checks: ${allStatusChecksPass ? '‚úÖ' : '‚ùå'}\n- Check runs: ${allCheckRunsPass ? '‚úÖ' : '‚ùå'}\n- SonarCloud: ${sonarCheckPassed ? '‚úÖ' : '‚ùå'}\n\nPlease merge manually.`
                });
              }
            } else {
              console.log("‚ùå Not all required checks passed after 4-minute wait:");
              console.log(`  - Status checks: ${allStatusChecksPass}`);
              console.log(`  - Check runs: ${allCheckRunsPass}`);
              console.log(`  - SonarCloud: ${sonarCheckPassed}`);
              console.log(`  - Has required checks: ${hasRequiredChecks}`);
              
              // Agregar comentario informativo sobre checks pendientes
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: `‚è±Ô∏è **Auto-merge update after 4-minute wait:**\n\n**Check Status:**\n- Status checks: ${allStatusChecksPass ? '‚úÖ Passed' : '‚ùå Failed'}\n- Check runs: ${allCheckRunsPass ? '‚úÖ Passed' : '‚ùå Failed'}\n- SonarCloud: ${sonarCheckPassed ? '‚úÖ Passed' : hasRequiredChecks ? '‚ùå Failed' : '‚ö†Ô∏è Not found'}\n\n${!shouldMerge ? '**Action needed:** Some checks are still failing. Please review and merge manually.' : ''}`
              });
            }